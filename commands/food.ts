import { InlineKeyboard } from 'grammy';
import { MyContext } from '../types';

/**
 * Handler for the food callback query
 */
export const handleFood = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();

    const keyboard = new InlineKeyboard()
        .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è', 'food_add_plan')
        .row()
        .text('üÜï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è', 'food_create_plan')
        .row()
        .text('üìã –ú–æ–∏ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è', 'food_my_plans')
        .row()
        .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main');

    await ctx.reply('üçé *–†–∞–∑–¥–µ–ª –ø–∏—Ç–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
    });
};

/**
 * Handler for adding a food plan
 */
export const handleFoodAddPlan = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
        '‚ûï *–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.',
        {
            parse_mode: 'Markdown',
        }
    );
};

/**
 * Handler for creating a food plan
 */
export const handleFoodCreatePlan = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
        'üÜï *–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.',
        {
            parse_mode: 'Markdown',
        }
    );
};

/**
 * Handler for viewing my food plans
 */
export const handleFoodMyPlans = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
        'üìã *–ú–æ–∏ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è*\n\n–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è.',
        {
            parse_mode: 'Markdown',
        }
    );
};
