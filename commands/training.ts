import { InlineKeyboard } from 'grammy';
import { MyContext } from '../types';

/**
 * Handler for the training callback query
 */
export const handleTraining = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();

    const keyboard = new InlineKeyboard()
        .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É', 'training_add_program')
        .row()
        .text('üÜï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É', 'training_create_program')
        .row()
        .text('üìã –ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã', 'training_my_programs')
        .row()
        .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main');

    await ctx.reply('üèãÔ∏è‚Äç‚ôÇÔ∏è *–†–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
    });
};

/**
 * Handler for adding a training program
 */
export const handleTrainingAddProgram = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
        '‚ûï *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.',
        {
            parse_mode: 'Markdown',
        }
    );
};

/**
 * Handler for creating a training program
 */
export const handleTrainingCreateProgram = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
        'üÜï *–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.',
        {
            parse_mode: 'Markdown',
        }
    );
};

/**
 * Handler for viewing my training programs
 */
export const handleTrainingMyPrograms = async (ctx: MyContext): Promise<void> => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
        'üìã *–ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã*\n\n–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.',
        {
            parse_mode: 'Markdown',
        }
    );
};
